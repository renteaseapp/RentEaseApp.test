// Removed unused import: aiChatService
import { searchProducts, getFeaturedProducts, getPopularProducts, getCategories } from './productService';
import { Product, ProductSearchParams, Category } from '../types';

// Web Search Interface for external product comparison
interface WebSearchResult {
  title: string;
  url: string;
  snippet: string;
  price?: string;
  source: string;
}

interface ProductComparison {
  localProducts: Product[];
  webResults: WebSearchResult[];
  comparisonSummary: string;
}

export interface ProductRecommendation {
  products: Product[];
  query: string;
  totalFound: number;
  categories: string[];
}

export interface CategoryMapping {
  [key: string]: number;
}

export interface AIProductContext {
  enableProductSearch: boolean;
  lastQuery: string;
  lastResults: Product[];
}

class AIProductAssistantService {
  private static instance: AIProductAssistantService;
  private productContext: AIProductContext = {
    enableProductSearch: false,
    lastQuery: '',
    lastResults: []
  };
  private categoryMapping: CategoryMapping = {};
  private categoriesLoaded: boolean = false;
  private webSearchEnabled: boolean = false;

  private constructor() {}

  public static getInstance(): AIProductAssistantService {
    if (!AIProductAssistantService.instance) {
      AIProductAssistantService.instance = new AIProductAssistantService();
    }
    return AIProductAssistantService.instance;
  }

  public toggleProductSearch(): boolean {
    this.productContext.enableProductSearch = !this.productContext.enableProductSearch;
    return this.productContext.enableProductSearch;
  }

  public isProductSearchEnabled(): boolean {
    return this.productContext.enableProductSearch;
  }

  public toggleWebSearch(): boolean {
    this.webSearchEnabled = !this.webSearchEnabled;
    return this.webSearchEnabled;
  }

  public isWebSearchEnabled(): boolean {
    return this.webSearchEnabled;
  }

  private async loadCategories(): Promise<void> {
    if (this.categoriesLoaded) return;
    
    try {
      console.log('üè∑Ô∏è Loading categories from API...');
      const response = await getCategories();
      const categories = response.data || [];
      
      // Build dynamic category mapping
      this.categoryMapping = {};
      categories.forEach((category: Category) => {
        if (category.name) {
          this.categoryMapping[category.name.toLowerCase()] = category.id;
        }
        if (category.name_en) {
          this.categoryMapping[category.name_en.toLowerCase()] = category.id;
        }
      });
      
      console.log('‚úÖ Categories loaded:', Object.keys(this.categoryMapping));
      this.categoriesLoaded = true;
    } catch (error) {
      console.error('‚ùå Failed to load categories:', error);
      // Fallback to hardcoded mapping if API fails
      this.categoryMapping = {
        '‡∏Å‡∏•‡πâ‡∏≠‡∏á': 1, 'camera': 1,
        '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': 2, 'phone': 2, '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠': 2,
        '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': 3, 'computer': 3, 'laptop': 3,
        '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á': 4, 'audio': 4,
        '‡πÄ‡∏Å‡∏°': 5, 'game': 5,
        '‡∏Å‡∏µ‡∏¨‡∏≤': 6, 'sports': 6,
        '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß': 7, 'kitchen': 7,
        '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠': 8, 'tools': 8,
        '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå': 9, 'furniture': 9,
        '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô': 10, 'fashion': 10
      };
      this.categoriesLoaded = true;
    }
  }

  // Note: checkProductAvailability method removed as it was unused

  public async processMessageWithProducts(
    message: string
  ): Promise<string> {
    try {
      console.log('üéØ Processing user message for products:', message);
      
      // Load categories first
      await this.loadCategories();
      
      // Test API connectivity first
      console.log('üîç Testing API connectivity...');
      try {
        const testResponse = await searchProducts({ limit: 1, page: 1 });
        console.log('‚úÖ API test successful:', testResponse.data?.length || 0, 'products found');
        
        if (!testResponse.data || testResponse.data.length === 0) {
          console.log('‚ö†Ô∏è Database appears to be empty');
          return '\n\nüì¶ **‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô** ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' +
                 '\n\nüí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
        }
      } catch (apiError) {
        console.error('‚ùå API connection failed:', apiError);
        return '\n\n‚ö†Ô∏è **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ**' +
               '\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
      }

      if (!this.productContext.enableProductSearch) {
        console.log('üîç Product search is disabled');
        return '';
      }

      // Analyze message for product intent
      const productIntent = this.analyzeProductIntent(message);
      console.log('üéØ Product intent analysis:', productIntent);
      
      if (productIntent.hasIntent) {
        const recommendations = await this.searchProducts(productIntent);
        
        if (recommendations.products.length > 0) {
          this.productContext.lastQuery = productIntent.query;
          this.productContext.lastResults = recommendations.products;
          
          return this.formatProductRecommendations(recommendations);
        } else {
          return this.formatNoProductsFound(productIntent.query);
        }
      }
      
      return '';
    } catch (error) {
      console.error('‚ùå Error processing message with products:', error);
      return '‚ö†Ô∏è **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ**\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô';
    }
  }

  private analyzeProductIntent(message: string): { hasIntent: boolean; query: string; category?: string } {
    const lowerMessage = message.toLowerCase();
    
    console.log('üîç Analyzing intent for message:', message);
    


    // Comprehensive product keywords in Thai and English
    const productKeywords = [
      '‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera', '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå', 'phone', '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠', 'mobile',
      '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', 'computer', 'laptop', 'notebook', 'pc',
      '‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï', 'tablet', 'ipad',
      '‡πÄ‡∏•‡∏ô‡∏™‡πå', 'lens', '‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á', 'tripod', '‡πÑ‡∏ü', 'light', 'flash',
      '‡πÄ‡∏ä‡πà‡∏≤', 'rent', 'rental',
      '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'product', 'items',
      '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', 'device', 'equipment',
      '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£', 'what do you have', 'available',
      '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', 'recommend', 'suggest',
      '‡∏£‡∏≤‡∏Ñ‡∏≤', 'price', 'cost',
      '‡∏´‡∏≤', 'find', 'search', 'looking for'
    ];

    // Check for product intent
    let hasIntent = false;
    let detectedQuery = '';
    let detectedCategory = '';

    // Enhanced category mapping with fuzzy matching
    const categoryMap: { [key: string]: string } = {
      '‡∏Å‡∏•‡πâ‡∏≠‡∏á': 'camera',
      'camera': 'camera',
      'canon': 'camera',
      'nikon': 'camera',
      'sony': 'camera',
      'fujifilm': 'camera',
      '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': 'electronics',
      'phone': 'electronics',
      '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠': 'electronics',
      'mobile': 'electronics',
      'iphone': 'electronics',
      'samsung': 'electronics',
      'xiaomi': 'electronics',
      'oppo': 'electronics',
      'vivo': 'electronics',
      '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': 'electronics',
      'computer': 'electronics',
      'laptop': 'electronics',
      'notebook': 'electronics',
      'macbook': 'electronics',
      'dell': 'electronics',
      'hp': 'electronics',
      'asus': 'electronics',
      'acer': 'electronics',
      'lenovo': 'electronics',
      '‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï': 'electronics',
      'tablet': 'electronics',
      'ipad': 'electronics',
      '‡πÄ‡∏•‡∏ô‡∏™‡πå': 'electronics',
      'lens': 'electronics',
      '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á': 'electronics',
      'audio': 'electronics',
      'microphone': 'electronics',
      'mic': 'electronics'
    };

    // Check for category keywords
    for (const [thaiKeyword, category] of Object.entries(categoryMap)) {
      if (lowerMessage.includes(thaiKeyword)) {
        hasIntent = true;
        detectedCategory = category;
        detectedQuery = thaiKeyword;
        console.log('‚úÖ Category detected:', category, 'from keyword:', thaiKeyword);
        break;
      }
    }

    // Check for general product inquiries
    const generalInquiries = [
      '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤', '‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      '‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ', 'what can i rent', 'recommend products',
      'show me products', 'available items', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á',
      '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', '‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢', '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£', '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
    ];

    for (const inquiry of generalInquiries) {
      if (lowerMessage.includes(inquiry.toLowerCase())) {
        hasIntent = true;
        detectedQuery = 'all';
        detectedCategory = 'all';
        console.log('‚úÖ General inquiry detected');
        break;
      }
    }

    // If no specific category, check for product-related keywords
    if (!hasIntent) {
      const hasProductKeyword = productKeywords.some(keyword => 
        lowerMessage.includes(keyword.toLowerCase())
      );
      
      if (hasProductKeyword) {
        hasIntent = true;
        detectedQuery = lowerMessage.replace(/[^\w\s‡∏Å-‡πô]/g, '').trim();
        detectedCategory = 'all';
        console.log('‚úÖ Product keyword detected, query:', detectedQuery);
      }
    }

    // If still no intent, but message is very short, assume it's a product query
    if (!hasIntent && lowerMessage.length <= 10 && lowerMessage.length > 0) {
      hasIntent = true;
      detectedQuery = lowerMessage;
      detectedCategory = 'all';
      console.log('‚úÖ Short message, treating as product query:', detectedQuery);
    }

    // Clean up query
    if (detectedQuery && detectedQuery !== 'all') {
      detectedQuery = detectedQuery
        .replace(/^(‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥|‡∏´‡∏≤|‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤|‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ|‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£|‡πÄ‡∏ä‡πà‡∏≤|‡∏î‡∏π|‡∏°‡∏µ)/gi, '')
        .replace(/(‡πÑ‡∏´‡∏°|‡∏ö‡πâ‡∏≤‡∏á|‡∏´‡∏ô‡πà‡∏≠‡∏¢|‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤|‡∏Ç‡∏≠‡∏á|‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)/gi, '')
        .trim();
      
      if (!detectedQuery || detectedQuery.length < 2) {
        detectedQuery = 'all';
      }
    }

    console.log('üéØ Final intent analysis:', { hasIntent, query: detectedQuery, category: detectedCategory });
    
    return {
      hasIntent,
      query: detectedQuery || 'all',
      category: detectedCategory || 'all'
    };
  }

  private async searchProducts(intent: { query: string; category?: string }): Promise<ProductRecommendation> {
    try {
      console.log('üîç Starting product search...');
      console.log('Query:', intent.query, 'Category:', intent.category);
      
      let products: Product[] = [];
      
      // Extract individual words from query for broader search
      const queryWords = intent.query && intent.query !== 'all' 
        ? intent.query.toLowerCase().split(/\s+/).filter(word => word.length > 1)
        : [];
      
      // First try search with query
      if (intent.query && intent.query !== 'all') {
        const searchParams: ProductSearchParams = {
          q: intent.query,
          limit: 8,
          page: 1
        };
        
        if (intent.category && intent.category !== 'all') {
          const categoryId = this.mapCategoryToId(intent.category);
          if (categoryId) {
            searchParams.category_id = categoryId;
          }
        }
        
        console.log('üìã Search parameters:', searchParams);
        
        try {
          const result = await searchProducts(searchParams);
          products = result.data || [];
          console.log(`‚úÖ Search results for "${intent.query}": ${products.length} products found`);
          
          // If no results with full query, try individual words
          if (products.length === 0 && queryWords.length > 0) {
            for (const word of queryWords) {
              const wordSearchParams: ProductSearchParams = {
                q: word,
                limit: 8,
                page: 1
              };
              
              if (intent.category && intent.category !== 'all') {
                const categoryId = this.mapCategoryToId(intent.category);
                if (categoryId) {
                  wordSearchParams.category_id = categoryId;
                }
              }
              
              const wordResult = await searchProducts(wordSearchParams);
              if (wordResult.data && wordResult.data.length > 0) {
                products = wordResult.data;
                console.log(`‚úÖ Found products with word "${word}": ${products.length} products`);
                break;
              }
            }
          }
        } catch (error) {
          console.warn('‚ùå Search failed, trying fallback methods:', error);
        }
      }
      
      // If no products from search, try featured products
      if (products.length === 0) {
        try {
          const featured = await getFeaturedProducts(8);
          products = featured.data || [];
          console.log(`‚úÖ Featured products: ${products.length} products found`);
        } catch (error) {
          console.warn('‚ùå Featured products failed, trying popular products:', error);
        }
      }
      
      // If still no products, try popular products
      if (products.length === 0) {
        try {
          const popular = await getPopularProducts(8);
          products = popular.data || [];
          console.log(`‚úÖ Popular products: ${products.length} products found`);
        } catch (error) {
          console.warn('‚ùå Popular products failed:', error);
        }
      }
      
      console.log('üìä Final search result:', products.length, 'products');
      
      return {
        products: products.slice(0, 5),
        query: intent.query,
        totalFound: products.length,
        categories: [...new Set(products.map(p => p.category?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'))]
      };
    } catch (error) {
      console.error('‚ùå Error searching products:', error);
      throw error;
    }
  }

  private mapCategoryToId(category: string): number | undefined {
    // Use dynamic category mapping if available
    if (this.categoryMapping && Object.keys(this.categoryMapping).length > 0) {
      const normalizedCategory = category.toLowerCase();
      
      // First try exact match
      if (this.categoryMapping[normalizedCategory]) {
        return this.categoryMapping[normalizedCategory];
      }
      
      // Then try partial match
      for (const [key, id] of Object.entries(this.categoryMapping)) {
        if (key.includes(normalizedCategory) || normalizedCategory.includes(key)) {
          return id;
        }
      }
    }
    
    // Fallback to hardcoded mapping
    const fallbackMapping: { [key: string]: number } = {
      '‡∏Å‡∏•‡πâ‡∏≠‡∏á': 1,
      'camera': 1,
      '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': 2,
      'phone': 2,
      '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': 3,
      'computer': 3,
      'laptop': 3,
      '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á': 4,
      'audio': 4,
      '‡πÄ‡∏Å‡∏°': 5,
      'game': 5,
      '‡∏Å‡∏µ‡∏¨‡∏≤': 6,
      'sports': 6,
      '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß': 7,
      'kitchen': 7,
      '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠': 8,
      'tools': 8,
      '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå': 9,
      'furniture': 9,
      '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô': 10,
      'fashion': 10
    };
    
    return fallbackMapping[category.toLowerCase()];
  }

  private formatProductRecommendations(recommendations: ProductRecommendation): string {
    if (recommendations.products.length === 0) {
      return this.formatNoProductsFound(recommendations.query);
    }

    let response = `\n\nüîç **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${recommendations.query}"**\n`;
    response += `‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${recommendations.totalFound} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n`;

    recommendations.products.forEach((product, index) => {
      response += `${index + 1}. **${product.title}**\n`;
      response += `   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø${product.rental_price_per_day}/‡∏ß‡∏±‡∏ô\n`;
      response += `   üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${product.province?.name_th || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n`;
      response += `   üì¶ ‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤: ${product.quantity_available || 1} ‡∏ä‡∏¥‡πâ‡∏ô\n`;
      
      // Add category information if available
      if (product.category?.name) {
        response += `   üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î: ${product.category.name}\n`;
      }
      
      if (product.description) {
        const shortDesc = product.description.length > 100 
          ? product.description.substring(0, 100) + '...' 
          : product.description;
        response += `   üìù ${shortDesc}\n`;
      }
      
      response += `   üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: /products/${product.slug}\n\n`;
    });

    if (recommendations.totalFound > 5) {
      response += `‚ÑπÔ∏è ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ${recommendations.totalFound - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô\n`;
    }

    return response;
  }

  private formatNoProductsFound(query: string): string {
    return `\n\nüîç **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${query}"**\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ\n‚Ä¢ ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\nüí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ "‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏á" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢"`;
  }

  public getLastResults(): Product[] {
    return this.productContext.lastResults;
  }

  public getContext(): AIProductContext {
    return { ...this.productContext };
  }

  // Web Search functionality for product comparison
  private async searchWeb(query: string): Promise<WebSearchResult[]> {
    try {
      const API_URL = "https://api.search1api.com/search";
      
      const searchData = {
        query: `${query} ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏≤ rental price`,
        search_service: "google",
        max_results: 5,
        crawl_results: 2,
        language: "th",
        time_range: "month"
      };

      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
          // Note: Using keyless free tier
        },
        body: JSON.stringify(searchData)
      });

      if (!response.ok) {
        throw new Error(`Web search failed: ${response.status}`);
      }

      const results = await response.json();
      
      return results.results?.map((result: any) => {
        let hostname = 'Unknown';
        try {
          if (result.url && result.url.trim()) {
            hostname = new URL(result.url).hostname;
          }
        } catch (e) {
          console.warn('Invalid URL:', result.url);
        }
        
        return {
          title: result.title || '',
          url: result.url || '',
          snippet: result.snippet || '',
          price: this.extractPrice(result.snippet || result.title || ''),
          source: hostname
        };
      }) || [];
    } catch (error) {
      console.error('Web search error:', error);
      return [];
    }
  }

  private extractPrice(text: string): string | undefined {
    // Extract price patterns from Thai text
    const pricePatterns = [
      /([0-9,]+)\s*‡∏ö‡∏≤‡∏ó/g,
      /‡∏ø\s*([0-9,]+)/g,
      /([0-9,]+)\s*THB/g,
      /([0-9,]+)\s*‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô/g,
      /([0-9,]+)\s*\/\s*‡∏ß‡∏±‡∏ô/g
    ];

    for (const pattern of pricePatterns) {
      const match = text.match(pattern);
      if (match) {
        return match[0];
      }
    }
    return undefined;
  }

  private filterMatchingWebResults(localProducts: Product[], webResults: WebSearchResult[]): WebSearchResult[] {
    if (localProducts.length === 0) {
      return webResults;
    }

    const matchedResults: WebSearchResult[] = [];
    
    for (const localProduct of localProducts) {
      const localKeywords = this.extractProductKeywords(localProduct.title);
      const localBrand = this.extractBrand(localProduct.title);
      const localModel = this.extractModel(localProduct.title);
      
      for (const webResult of webResults) {
        const webBrand = this.extractBrand(webResult.title);
        const webModel = this.extractModel(webResult.title);
        
        // Strict matching: both brand and model must match
        const brandMatch = localBrand && webBrand && 
          localBrand.toLowerCase() === webBrand.toLowerCase();
        const modelMatch = localModel && webModel && 
          (localModel.toLowerCase() === webModel.toLowerCase() ||
           localModel.toLowerCase().includes(webModel.toLowerCase()) ||
           webModel.toLowerCase().includes(localModel.toLowerCase()));
        
        if (brandMatch && modelMatch) {
          matchedResults.push({
            ...webResult,
            title: `${webResult.title} (‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô: ${localProduct.title})`
          });
        }
      }
    }

    // If no exact matches found, return top 3 web results for general comparison
    return matchedResults.length > 0 ? matchedResults : webResults.slice(0, 3);
  }

  private extractBrand(title: string): string | null {
    const brands = ['Canon', 'Nikon', 'Sony', 'Fujifilm', 'Fuji', 'Olympus', 'Panasonic', 'Leica'];
    const brandMatch = brands.find(brand => 
      title.toLowerCase().includes(brand.toLowerCase())
    );
    return brandMatch || null;
  }

  private extractModel(title: string): string | null {
    // Extract model patterns like EOS R50, D850, A7III, X-T4, etc.
    const modelPatterns = [
      /EOS\s*[A-Z0-9]+/gi,  // Canon EOS models
      /[A-Z]+[0-9]+[A-Z]*/gi,  // General alphanumeric models
      /[A-Z]-[A-Z0-9]+/gi,  // Fuji X-T series
      /[0-9]+[A-Z]+/gi      // Models starting with numbers
    ];
    
    for (const pattern of modelPatterns) {
      const matches = title.match(pattern);
      if (matches && matches.length > 0) {
        return matches[0].replace(/\s+/g, ' ').trim();
      }
    }
    
    return null;
  }

  private extractProductKeywords(title: string): string[] {
    // Extract brand names, model numbers, and key product terms
    const keywords: string[] = [];
    
    const brand = this.extractBrand(title);
    if (brand) keywords.push(brand.toLowerCase());
    
    const model = this.extractModel(title);
    if (model) keywords.push(model.toLowerCase());
    
    // Product type keywords
    const productTypes = ['camera', 'lens', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡πÄ‡∏•‡∏ô‡∏™‡πå', 'mirrorless', 'dslr'];
    productTypes.forEach(type => {
      if (title.toLowerCase().includes(type.toLowerCase())) {
        keywords.push(type.toLowerCase());
      }
    });
    
    return keywords;
  }

  private calculateSimilarity(keywords1: string[], keywords2: string[]): number {
    if (keywords1.length === 0 || keywords2.length === 0) return 0;
    
    const intersection = keywords1.filter(k1 => 
      keywords2.some(k2 => k2.includes(k1) || k1.includes(k2))
    );
    
    return intersection.length / Math.max(keywords1.length, keywords2.length);
  }

  public async compareWithWeb(query: string): Promise<ProductComparison> {
    try {
      // Search local products
      const localIntent = this.analyzeProductIntent(query);
      const localRecommendations = await this.searchProducts(localIntent);
      
      // Search web if enabled
      let webResults: WebSearchResult[] = [];
      if (this.webSearchEnabled) {
        const allWebResults = await this.searchWeb(query);
        // Filter web results to match only similar products from local inventory
        webResults = this.filterMatchingWebResults(localRecommendations.products, allWebResults);
      }

      // Generate comparison summary
      const comparisonSummary = this.generateComparisonSummary(
        localRecommendations.products,
        webResults,
        query
      );

      return {
        localProducts: localRecommendations.products,
        webResults,
        comparisonSummary
      };
    } catch (error) {
      console.error('Product comparison error:', error);
      return {
        localProducts: [],
        webResults: [],
        comparisonSummary: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${query}"`
      };
    }
  }

  private generateComparisonSummary(
    localProducts: Product[],
    webResults: WebSearchResult[],
    query: string
  ): string {
    let summary = `\n\nüîç **‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${query}"**\n\n`;

    // Local products summary
    if (localProducts.length > 0) {
      summary += `üì¶ **‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ (${localProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):**\n`;
      localProducts.slice(0, 3).forEach(product => {
        summary += `‚Ä¢ ${product.title} - ${product.rental_price_per_day} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô\n`;
      });
      summary += `\n`;
    } else {
      summary += `üì¶ **‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:** ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n\n`;
    }

    // Web results summary
    if (webResults.length > 0) {
      const hasMatchedResults = webResults.some(result => result.title.includes('‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢:'));
      if (hasMatchedResults) {
        summary += `üåê **‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (${webResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):**\n`;
      } else {
        summary += `üåê **‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (${webResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):**\n`;
      }
      webResults.slice(0, 5).forEach(result => {
        summary += `‚Ä¢ ${result.title}${result.price ? ` - ${result.price}` : ''} (${result.source})\n`;
      });
      summary += `\n`;
    } else {
      summary += `üåê **‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:** ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö\n\n`;
    }

    // Enhanced comparison insights
    if (localProducts.length > 0 && webResults.length > 0) {
      const hasMatchedResults = webResults.some(result => result.title.includes('‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢:'));
      if (hasMatchedResults) {
        summary += `üéØ **‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô:**\n`;
        summary += `‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n`;
        summary += `‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n`;
        summary += `‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°, ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö)\n`;
        summary += `‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö\n`;
      } else {
        summary += `üí° **‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**\n`;
        summary += `‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤\n`;
        summary += `‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n`;
        summary += `‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á\n`;
      }
    } else if (localProducts.length > 0) {
      summary += `‚úÖ **‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏≤:**\n`;
      summary += `‚Ä¢ ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤\n`;
      summary += `‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n`;
      summary += `‚Ä¢ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n`;
    }

    return summary;
  }
}

export const aiProductAssistantService = AIProductAssistantService.getInstance();